---
- hosts: all
  remote_user: root
  vars:
      ansible_python_interpreter: "/usr/bin/python3"
      xunit: false
      cni_commit: dcf7368eeab15e2affc6256f0bb1e84dd46a34de
      origin_commit: v3.7.0-alpha.0
  tasks:
    - name: Make sure we have all required packages
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - wget
        - git
        - make
        - gcc
        - tar
        - libseccomp-devel
        - golang
        - glib2-devel
        - glibc-static
        - container-selinux
        - btrfs-progs-devel
        - device-mapper-devel
        - glibc-devel
        - gpgme-devel
        - libassuan-devel
        - libgpg-error-devel
        - pkgconfig
        - json-glib-devel
        - skopeo-containers
        - NetworkManager
        - docker
        - ostree-devel
        - zip
        - mercurial
        - krb5-devel
        - bsdtar
        - bc
        - rsync
        - bind-utils
        - file
        - jq
        - tito
        - createrepo
        - openssl
        - gpgme
        - libassuan
        - libselinux-python
        - python2
    - name: Make testing directories to conform to testing standards
      file:
        path: "{{ item }}"
        state: directory
      with_items:
           - /usr/local/go
    - name: install Golang upstream in CentOS
      shell: |
              curl -fsSL "https://golang.org/dl/go1.8.3.linux-amd64.tar.gz" \
              | tar -xzC /usr/local
    - name: Set custom golang path
      lineinfile:
        dest: /root/.bashrc
        line: 'export PATH=/usr/local/go/bin:$PATH'
        insertafter: 'EOF'
        regexp: 'export PATH=/usr/local/go/bin:$PATH'
        state: present
    - name: dnf clean
      command: "dnf clean all"
    - name: enable and start docker
      systemd:
        name: docker
        state: started
        enabled: yes
    - name: update all
      dnf:
        name: '*'
        state: latest
    - name: clone runc
      git:
        repo: https://github.com/opencontainers/runc
        dest: /root/go/src/github.com/opencontainers/runc
    - name: clone CRI-O
      git:
        repo: https://github.com/kubernetes-incubator/cri-o
        dest: /root/go/src/github.com/kubernetes-incubator/cri-o
        force: yes
    - name: clone CNI
      git:
        repo: https://github.com/containernetworking/plugins
        dest: /root/go/src/github.com/containernetworking/plugins
        version: "{{ cni_commit }}"
    - name: clone skopeo
      git:
        repo: https://github.com/projectatomic/skopeo
        dest: /root/go/src/github.com/projectatomic/skopeo
    - name: clone origin
      git:
        repo: https://github.com/openshift/origin
        dest: /root/go/src/github.com/openshift/origin
        version: "{{ origin_commit }}"
    - name: build skopeo
      shell: |
              cd /root/go/src/github.com/projectatomic/skopeo && \
              export GOPATH=/root/go && \
              make binary-local && \
              make install-binary
    - name: build runc
      shell: |
              cd /root/go/src/github.com/opencontainers/runc && \
              export GOPATH=/root/go && \
              make BUILDTAGS="seccomp selinux" && \
              make install
    - name: copy runc
      shell: |
              cp /usr/local/sbin/runc /usr/bin/runc
    - name: build cri-o
      shell: |
              cd /root/go/src/github.com/kubernetes-incubator/cri-o && \
              export GOPATH=/root/go && \
              make install.tools && \
              make && \
              make install && \
              make install.systemd && \
              make install.config
    - name: build CNI stuff
      shell: |
              cd /root/go/src/github.com/containernetworking/plugins && \
              ./build.sh && \
              mkdir -p /opt/cni/bin && \
              cp bin/* /opt/cni/bin/ && \
              mkdir -p /etc/cni/net.d && \
              cp /root/go/src/github.com/kubernetes-incubator/cri-o/contrib/cni/*.conf /etc/cni/net.d
    - name: build origin
      shell: |
              cd /root/go/src/github.com/openshift/origin && \
              export GOPATH=/root/go && \
              export OS_OUTPUT_GOPATH=1 && \
              make && \
              cp _output/local/bin/linux/amd64/{openshift,oc,oadm} /usr/bin
    - name: run CRI-O with systemd cgroup manager
      replace:
        regexp: 'cgroupfs'
        replace: 'systemd'
        name: /etc/crio/crio.conf
        backup: yes
    - name: run with overlay2
      replace:
        regexp: 'storage_driver = ""'
        replace: 'storage_driver = "overlay2"'
        name: /etc/crio/crio.conf
        backup: yes
    - name: enable and start CRI-O
      systemd:
        name: crio
        state: started
        enabled: yes
        daemon_reload: yes
    - name: generate openshift configuration
      shell: |
              rm -rf openshift.local.* && \
              cd /root/go/src/github.com/openshift/origin && \
              openshift start --write-config=openshift.local.config
    - name: modify openshift node config to work with cri-o
      blockinfile:
          path: "{{'/root/go/src/github.com/openshift/origin/openshift.local.config/node-' + ansible_nodename + '/node-config.yaml'}}"
          marker: "# ANSIBLE MANAGED BLOCK"
          insertafter: "kind: NodeConfig"
          content: |
                    kubeletArguments:
                      container-runtime:
                      - remote
                      container-runtime-endpoint:
                      - /var/run/crio.sock
                      image-service-endpoint:
                      - /var/run/crio.sock
                      node-labels:
                      - router=true
                      - registry=true
                      runtime-request-timeout:
                      - 10m
    - name: flush iptables
      iptables: flush=yes
    - name: Permanently disable selinux
      selinux:
        state: permissive
        policy: targeted

